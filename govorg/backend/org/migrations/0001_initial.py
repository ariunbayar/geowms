# Generated by Django 3.0.7 on 2021-05-04 07:48

from django.db import migrations
from django.db.models import Count
import json


def _remove(LProperties, model):
    qs = model.objects
    qs = qs.filter(property_id__isnull=False)
    qs_property_ids = qs.values("property_id").annotate(Count("property_id")).order_by('property_id')
    for row in qs_property_ids:
        property_id = row['property_id']
        check_lproperties = LProperties.objects.filter(property_id=property_id).first()
        if not check_lproperties:
            qs_remove = qs.filter(property_id=property_id)
            qs_remove.delete()


def non_existent_property(apps, schema_editor):
    print('\nУншиж байна...')
    LProperties = apps.get_model('backend_inspire', 'LProperties')
    GovRoleInspire = apps.get_model('backend_inspire', 'GovRoleInspire')
    GovPermInspire = apps.get_model('backend_inspire', 'GovPermInspire')
    EmpRoleInspire = apps.get_model('backend_inspire', 'EmpRoleInspire')
    EmpPermInspire = apps.get_model('backend_inspire', 'EmpPermInspire')

    _remove(LProperties, GovRoleInspire)
    _remove(LProperties, GovPermInspire)
    _remove(LProperties, EmpRoleInspire)
    _remove(LProperties, EmpPermInspire)


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.RunPython(non_existent_property),
    ]
