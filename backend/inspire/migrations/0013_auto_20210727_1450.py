# Generated by Django 3.0.7 on 2021-07-27 06:50

from django.db import migrations, models
import django.db.models.deletion
from django.db import connections


def _create_pk(table, cursor):
    obj = {
        'l_properties': ['l_properties_pkey', 'property_id'],
        'l_data_types': ['l_data_types_pkey', 'data_type_id'],
        'l_features': ['l_features_pkey', 'feature_id'],
    }
    pkey_name, field_name = obj[table]
    sql = """
        ALTER TABLE {}
        ADD CONSTRAINT {}
        PRIMARY KEY ({});
    """.format(table, pkey_name, field_name)
    cursor.execute(sql)


def _check_pk(apps, schema_editor):
    LProperties = apps.get_model('backend_inspire', 'LProperties')
    tables = ['l_data_types', 'l_features', 'l_properties']

    unneed_properties = LProperties.objects.filter(property_id=0)
    if unneed_properties > 1:
        unneed_properties.delete()

    cursor = connections['default'].cursor()
    for table in tables:
        sql = """
            SELECT c.column_name, c.data_type
            FROM information_schema.table_constraints tc
            JOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name)
            JOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema
            AND tc.table_name = c.table_name AND ccu.column_name = c.column_name
            WHERE constraint_type = 'PRIMARY KEY' and tc.table_name = '{}';
        """.format(table)
        cursor.execute(sql)
        value = cursor.fetchone()
        if not value:
            _create_pk(table, cursor)


class Migration(migrations.Migration):

    dependencies = [
        ('backend_inspire', '0012_auto_20210121_1219'),
    ]

    operations = [
        migrations.RunPython(_check_pk),
        migrations.DeleteModel(
            name='MDatasBoundary',
        ),
        migrations.DeleteModel(
            name='MDatasBuilding',
        ),
        migrations.DeleteModel(
            name='MDatasCadastral',
        ),
        migrations.DeleteModel(
            name='MDatasGeographical',
        ),
        migrations.DeleteModel(
            name='MDatasHydrography',
        ),
        migrations.RemoveField(
            model_name='govroleinspire',
            name='data_type_id',
        ),
        migrations.RemoveField(
            model_name='govroleinspire',
            name='feature_id',
        ),
        migrations.RemoveField(
            model_name='govroleinspire',
            name='property_id',
        ),
        migrations.AddField(
            model_name='govroleinspire',
            name='data_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend_inspire.LDataTypes'),
        ),
        migrations.AddField(
            model_name='govroleinspire',
            name='feature',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend_inspire.LFeatures'),
        ),
        migrations.AddField(
            model_name='govroleinspire',
            name='property',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='backend_inspire.LProperties'),
        ),
    ]
